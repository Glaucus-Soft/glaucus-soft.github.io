<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Glaucus Soft</title><link href="http://www.glaucussoft.com/" rel="alternate"></link><link href="http://www.glaucussoft.com/feeds/all.atom.xml" rel="self"></link><id>http://www.glaucussoft.com/</id><updated>2017-01-18T11:00:00+01:00</updated><entry><title>Apache sobre SSL</title><link href="http://www.glaucussoft.com/apache-sobre-ssl.html" rel="alternate"></link><published>2017-01-18T11:00:00+01:00</published><updated>2017-01-18T11:00:00+01:00</updated><author><name>Glaucus Soft</name></author><id>tag:www.glaucussoft.com,2017-01-18:/apache-sobre-ssl.html</id><summary type="html">&lt;p&gt;Configurar servicio Apache para que funcione sobre ssl (https)&amp;reg;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Cuando hablamos de seguridad, en lo que a servidores de páginas web respecta, hablamos del protocolo https. Https es importante ya que nos proporciona un cifrado punto a punto (desde el servidor hasta el cliente) de las comunicaciones entre ambos, de forma que si alguien nos ataca e intercepta un paquete de red no pueda descifrarlo. Esto es útil cuando en nuestro sitio web se manejan contraseñas y credenciales de acceso susceptibles a ataques. Por ello es una medida de seguridad muy a tener en cuenta y hoy vamos a explicar como se instala en nuestros servidores, en nuestro caso usaremos Ubuntu Server.&lt;/p&gt;
&lt;h2&gt;Creación de un certificado SSL autofirmado&lt;/h2&gt;
&lt;p&gt;Las empresas de importantes y las grandes entidades suelen usar certificados SSL expedidos por la FNMT (Fábrica Nacional de Moneda y Timbre), que es una entidad cuyos certificados están reconocidos por los navegadores web y son oficiales. Para nuestro caso lo que pretendemos es simplemente cifrar el tráfico http por lo cual no nos hace falta solicitar dicho certificado oficial, basta con generar el nuestro de la siguiente manera&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/certificado.key -out /etc/ssl/certs/certificado.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Los rasgos más importantes son los siguientes:
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;-days&lt;/strong&gt; que especifica el número de días que es válido el certificado (en nuestro caso 365 días).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;-keyout&lt;/strong&gt; que especifica la ruta donde se guarda el certificado.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h2&gt;Habilitar cambios en el servicio Apache2&lt;/h2&gt;
&lt;p&gt;Para que nuestro servidor Apache pueda interpretar dicho certificado y usarlo debemos habilitar varios de sus modulos&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2enmod ssl &amp;amp;&amp;amp; sudo a2enmod headers
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Habilitar el uso de SSL en nuestro sitio web&lt;/h2&gt;
&lt;p&gt;Ahora vamos a habilitar en nuestro archivo de virtualhost por defecto el uso de SSL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/apache2/sites-available/default-ssl.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y debería quedar de la siguiente manera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="err"&gt;mod_ssl.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;_default_:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        ServerAdmin tudirecciondecorreo@dominio.tld
        ServerName dominio_o_IP
        DocumentRoot /var/www/html
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
        SSLEngine on
        SSLCertificateFile /etc/ssl/certs/certificado.crt
        SSLCertificateKeyFile /etc/ssl/private/certificado.key
        &lt;span class="nt"&gt;&amp;lt;FilesMatch&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;\.(cgi|shtml|phtml|php)$&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        SSLOptions +StdEnvVars
        &lt;span class="nt"&gt;&amp;lt;/FilesMatch&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="err"&gt;/usr/lib/cgi-bin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            SSLOptions +StdEnvVars
        &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

        BrowserMatch &amp;quot;MSIE [2-6]&amp;quot; \
            nokeepalive ssl-unclean- shutdown \
            downgrade-1.0 force-response-
    &lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Redirección permanente a virtualhost SSL&lt;/h2&gt;
&lt;p&gt;Ahora debemos modificar nuestro archivo de virtualhost por defecto para que requiera siempre el uso de SSL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/apache2/sites-available/000-default.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y debemos añadir la línea&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    . . .
    Redirect permanent &amp;quot;/&amp;quot; &amp;quot;https://dominio_o_IP&amp;quot;
    . . .
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Prueba en un navegador web&lt;/h2&gt;
&lt;p&gt;Ya solo nos quedaría reiniciar el servicio de Apache2 para aplicar todos los cambios&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Y en un navegador web cualquiera introducimos la siguiente dirección&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://dominio_o_IP
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Observaciones&lt;/h2&gt;
&lt;p&gt;Hemos habilitado el uso de HTTP sobre SSL en el virtualhost por defecto de Apache2. Si necesitáis usar virtualhost distintos o no sabéis crear uno pasaos por nuestro tutorial &lt;strong&gt;Crear VirtualHost en Apache&lt;/strong&gt;&lt;/p&gt;</content><category term="apache2"></category><category term="ubuntu"></category><category term="server"></category><category term="ssl"></category><category term="configuración"></category><category term="https"></category><category term="http"></category></entry><entry><title>Hacer que tu mac hable</title><link href="http://www.glaucussoft.com/macos-habla.html" rel="alternate"></link><published>2016-12-30T10:00:00+01:00</published><updated>2016-12-30T10:00:00+01:00</updated><author><name>Glaucus</name></author><id>tag:www.glaucussoft.com,2016-12-30:/macos-habla.html</id><summary type="html">&lt;p&gt;Hacer que tu mac hable&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Cómo hacer que tu mac hable&lt;/h2&gt;
&lt;p&gt;Como bien sabemos nuestros ordenadores mac, gracias a la última actualización de software de MacOs Sierra, cuentan con Siri; el cual interactúa con nosotros y habla con nosotros. &lt;/p&gt;
&lt;p&gt;En las versiones anteriores de Mac OS X también teníamos Voice Over, que era un sistema similar a Siri pero enfocado al mundo de la accesibilidad con el cual nuestro ordenador también nos hablaba.&lt;/p&gt;
&lt;p&gt;Pero hoy vamos a ver como podemos hacer que nuestro ordenador hable y pronuncie cualquier texto que le digamos de una manera muy simple.&lt;/p&gt;
&lt;h3&gt;Abre el terminal&lt;/h3&gt;
&lt;p&gt;Lo primero que debemos hacer es localizar la aplicación llamada Terminal que se encuentra en la carpeta aplicaciones de nuestro mac y viene preinstalada por defecto en él.&lt;/p&gt;
&lt;h3&gt;Comando say&lt;/h3&gt;
&lt;p&gt;Una vez abierto el Terminal, escribimos en el el comando
&lt;p class="highlight"&gt;say param1&lt;/p&gt;
Donde "param1" sería lo que queremos que diga nuestro ordenador. Por ejemplo queremos que diga la frase "Hola mundo", pues el comando quedaría así
&lt;p class="highlight"&gt;say Hola mundo&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Utilidad&lt;/h3&gt;
&lt;p&gt;Una de las principales utilidades de esta curiosidad que trae nuestro ordenador es la de poder emular voces para usarlas a la hora de grabar cualquier vídeo o tutorial en caso de que no queramos hacerlo con nuestra propia voz.&lt;/p&gt;</content><category term="mac"></category><category term="speak"></category><category term="macos"></category><category term="osx"></category><category term="terminal"></category></entry><entry><title>Reproductor de música AirPlay con raspberry pi</title><link href="http://www.glaucussoft.com/musica-airplay-raspberry-pi.html" rel="alternate"></link><published>2016-12-29T12:00:00+01:00</published><updated>2016-12-29T12:00:00+01:00</updated><author><name>Glaucus Soft</name></author><id>tag:www.glaucussoft.com,2016-12-29:/musica-airplay-raspberry-pi.html</id><summary type="html">&lt;p&gt;Reproductor de música AirPlay con raspberry pi&amp;reg;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Reproductor de música AirPlay utilizando una raspberry pi&lt;/h2&gt;
&lt;p&gt;Muchos son los usos que le podemos dar a una placa raspberry pi, pero sin duda alguna uno de los más interesantes es darle la funcionalidad de reproductor de música mediante AirPlay. Este método te permite conectar tu smartphone, tablet o tu ordenador a la raspberry mediante la red inalámbrica de tu hogar para reproducir en ella, en este caso, la música del dispositivo.&lt;/p&gt;
&lt;p&gt;Para conseguir configurar nuestra raspberry pi como un reproductor de audio por AirPlay debemos seguir una serie de pasos enumerados a continuación&lt;/p&gt;
&lt;h3&gt;Actualizar repositorios&lt;/h3&gt;
&lt;p&gt;Lo primero es comprobar las actualizaciones de software disponibles y en caso de que las haya, aplicarlas al sistema.
&lt;p class="highlight"&gt;sudo apt-get update -y &amp;amp;&amp;amp; sudo apt-get upgrade -y&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Instalación de dependencias&lt;/h3&gt;
&lt;p&gt;Después de actualizar todos los repositorios debemos tener instalados en el sistema una serie de paquetes de los cuales dependerá el software que se encarga de hacer el AirPlay en nuestro dispositivo.
&lt;p class="highlight"&gt;sudo apt-get install git libao-dev libssl-dev libcrypt-openssl-rsa-perl libio-socket-inet6-perl libwww-perl avahi-utils libmodule-build-perl&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Instalar Shairport&lt;/h3&gt;
&lt;p&gt;Shairport es el software que nos va a emular el AirPlay en nuestra raspberry pi, para ello descargamos el proyecto y lo compilamos.
&lt;p class="highlight"&gt;git clone https://github.com/hendrikw82/shairport.git&lt;/p&gt;
&lt;p class="highlight"&gt;cd shairport&lt;/p&gt;
&lt;p class="highlight"&gt;make&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Y por último para ejecutar el servicio AirPlay y que se mantenga a la escucha de peticiones por parte de tu smartphone, tablet o tu ordenador.
&lt;p class="highlight"&gt;./shairport.pl -a NombreDeTuAirPlay&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Sugerencias&lt;/h3&gt;
&lt;p&gt;Al arrancarse Shairport como un proceso, cuando cerremos el terminal con el que se arranca o al reiniciar el sistema tendremos que estar constantemente ejecutando el comando anterior y teniendo una consola abierta. Para remediar esto podemos añadir una tarea programada a nuestro sistema para que Shairport se siga ejecutando siempre. Para ello vamos a ejecutar el siguiente comando.
&lt;p class="highlight"&gt;crontab -e&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;y posteriormente añadimos al final del todo la siguiente linea.
&lt;p class="highlight"&gt;@reboot /home/pi/shairport/shairport.pl -a NombreDeTuAirPlay&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;donde /home/pi/shairport/ es la ruta en la cual se encuentran alojados los ficheros del proyecto Shairport (donde nos lo descargamos anteriormente) y NombreDeTuAirPlay sería el nombre por el que buscaremos a nuestra raspberry pi cuando queramos hacer uso del AirPlay.&lt;/p&gt;</content><category term="raspberry"></category><category term="rasbperry pi"></category><category term="wireless"></category><category term="wifi"></category><category term="network"></category><category term="airplay"></category><category term="music"></category></entry><entry><title>Configurar red raspberry pi server</title><link href="http://www.glaucussoft.com/configurar-red-raspberry-pi-server.html" rel="alternate"></link><published>2016-12-28T22:00:00+01:00</published><updated>2016-12-28T22:00:00+01:00</updated><author><name>Glaucus Soft</name></author><id>tag:www.glaucussoft.com,2016-12-28:/configurar-red-raspberry-pi-server.html</id><summary type="html">&lt;p&gt;Configurar la conexión a red wifi en raspberry pi por línea de comandos&amp;reg;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Configuración de conexión wifi en raspberry pi mediante terminal&lt;/h2&gt;
&lt;p&gt;Cuando un usuario estándar adquiere una placa raspberry pi lo más probable es que la use con una distribución que ya posee entorno de escritorio gráfico (Raspbian con interfaz Pixel, OSMC, Ubuntu Mate, entre otros). Pues bien, en estos sistemas es muy sencillo configurar la conexión a la red mediante wifi debido a que tenemos un asistente gráfico que nos guía.&lt;/p&gt;
&lt;p&gt;El problema viene cuando somos usuarios más avanzados y escogemos un sistema operativo que no tiene entorno gráfico de usuario y con el que tenemos que realizar todas las operaciones mediante comandos en el terminal. La solución es aplicar tan solo estos simples pasos cada vez que queramos conectarnos a una red inalámbrica nueva:&lt;/p&gt;
&lt;h2&gt;Localización del archivo de configuración&lt;/h2&gt;
&lt;p&gt;Lo primero que tenemos que hacer es localizar el archivo de configuración que almacena todos los datos de las redes inalámbricas configuradas en nuestra raspberry pi. Este archivo es &lt;p class="highlight"&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Configuración de la red inalámbrica&lt;/h2&gt;
&lt;p&gt;Una vez abierto dicho archivo de configuración con el editor de texto que más nos guste, las redes se configuran en su interior de la siguiente manera 
    &lt;p class="highlight"&gt;
        network={
            ssid="NombreDeLaRed"
            psk="ClaveDeRed"
        }
    &lt;/p&gt;&lt;/p&gt;
&lt;p&gt;De manera que si tenemos una red que se llama RedInalambrica1 y su contraseña es 123456, el archivo de configuración quedaría asi
    &lt;p class="highlight"&gt;
        network={
            ssid="RedInalambrica1"
            psk="123456"
        }
    &lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Aplicar los cambios&lt;/h2&gt;
&lt;p&gt;Una vez guardados los cambios en dicho fichero de configuración es necesario reiniciar la red, para ello emplearemos los siguientes comandos
    &lt;p class="highlight"&gt;sudo ifdown wlan0&lt;/p&gt;
    &lt;p class="highlight"&gt;sudo ifup wlan0&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;y listo, ya tendríamos nuestra raspberry pi con entorno de comandos conectada a nuestra red inalámbrica.&lt;/p&gt;</content><category term="raspberry"></category><category term="rasbperry pi"></category><category term="wireless"></category><category term="wifi"></category><category term="network"></category></entry><entry><title>Iniciar con Windows</title><link href="http://www.glaucussoft.com/iniciar-con-windows.html" rel="alternate"></link><published>2016-12-16T10:20:00+01:00</published><updated>2016-12-16T11:30:00+01:00</updated><author><name>Glaucus Soft</name></author><id>tag:www.glaucussoft.com,2016-12-16:/iniciar-con-windows.html</id><summary type="html">&lt;p&gt;Sencillo metodo para iniciar aplicaciones a la vez que arranca Windows&amp;reg;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Iniciar aplicaciones con Windows&lt;/h2&gt;
&lt;p&gt;En multitud de ocasiones necesitamos que una aplicación se ejecute cada vez que arranquemos el PC. Algunas aplicaciones ya vienen con la opción de "Iniciar con Windows" pero otras no.
Para todas aquellas aplicaciones que no disponen de esta opción es posible iniciarlas a la vez que encendemos el PC de forma automática si seguimos los siguientes pasos:&lt;/p&gt;
&lt;h3&gt;Carpeta de inicio&lt;/h3&gt;
&lt;p&gt;Lo primero que tenemos que hacer es acceder a la carpeta que contiene los elementos que se ejecutan al inicio. Dependiendo si queremos que se ejecute solo con nuestro usuario o con cualquiera
de los usuarios registrados en el equipo accederiamos a una carpeta de inicio u otra como se muestra a continuación:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Presionamos las teclas WINDOWS + R&lt;/li&gt;
&lt;li&gt;Escribimos "shell:startup" (sin las comillas) para abrir nuestra carpeta de inicio o "shell:common startup" para la carpeta de inicio común a todos los usuarios.&lt;/li&gt;
&lt;li&gt;Presionamos "Aceptar"&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Acceso directo para el inicio&lt;/h3&gt;
&lt;p&gt;Una vez que tengamos abierta la carpeta de inicio podremos copiar el ejecutable que deseamos iniciar con Windows pero esto no es lo más aconsejable.
La mejor alternativa es crear un acceso directo al ejecutable que deseamos iniciar con Windows, de esta manera también podremos pasarle argumentos (en caso de que sea necesario) al propio ejecutable.
Para crear el acceso directo basta con seguir los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Pulsar el botón derecho del ratón &gt; Nuevo &gt; Acceso directo&lt;/li&gt;
  &lt;li&gt;Se abre un cuadro de diálogo donde debemos indicar la ruta del ejecutable pulsando "Examinar"&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Opcional) Si queremos pasarle argumentos al ejecutable los añadimos detrás de la ruta. Por ejemplo:&lt;/p&gt;
    &lt;p class="highlight"&gt;C:\ejecutable.exe argumento1 argumento2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Pulsamos "Siguiente" y el cuadro de diálogo nos ofrece la posibilidad de cambiarle el nombre. Podemos ponerle el que queramos para identificarlo mejor.&lt;/li&gt;
  &lt;li&gt;Por último damos a "Finalizar" y ya estaría listo&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Compatibilidad&lt;/h3&gt;
&lt;p&gt;Este método es funcional en las versiones de Windows a partir de Windows 8&lt;/p&gt;</content><category term="Windows"></category><category term="inicio"></category><category term="automatico"></category></entry></feed>